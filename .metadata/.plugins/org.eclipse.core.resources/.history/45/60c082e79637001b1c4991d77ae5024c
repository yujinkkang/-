package heap;

import java.util.Iterator;
import java.util.PriorityQueue;
import java.util.Scanner;

public class MoreSpicy {

	public static void main(String[] args) {

		PriorityQueue<Integer> pque = new PriorityQueue<>(); // 우선순위 큐 생성

		Scanner sc = new Scanner(System.in);

		System.out.print("각 음식의 스코빌 지수를 입력해주세요(,로 구분)"); // ex) 1,2,3,4,5
		String element = sc.next();

		if (!element.isEmpty()) { // 비어있는지 확인

			String[] elementArray = element.split(","); // 콤마로 자르기

			for (int i = 0; i < elementArray.length; i++) {
				pque.add(Integer.parseInt(elementArray[i])); // 우선순위 큐에 입력한 요소들을 넣어준다.
			}

			System.out.println("---------------------------------");
			System.out.print("k를 입력해주세요(기준 스코빌 지수)");
			int k = sc.nextInt();

			// <toArray>
			// - 배열을 가져올 수 있음.
			// - poll() 과 달리 요소를 지우지 않고, 리스트 처럼 그냥 순회만 할 경우 사용
			// - 정렬된 순서대로 순회되지 않음.
			// - 들어간 순서도 아님. [0] 에 poll() 할 요소만 와있는 상태.

			// int cnt = 0;
			//
			// for(Object o : pque.toArray()) {
			// System.out.println(cnt + " : " + o);
			// }

			Object[] pqueArray = pque.toArray();
			
			int cnt = 0;

			for (int i = 0; i < pqueArray.length; i++) {
				if (Integer.parseInt(pqueArray[i].toString()) >= k) {
					++cnt;
				}
			}
			System.out.println("cnt : " + cnt);
			
			
			if(cnt == pqueArray.length) {
				System.out.println("--------------------------------------");
				System.out.println("모든 음식의 스코빌지수가 k이상이라는 조건을 만족합니다.");
			}

			// <Iterator>
			// - 리스트 처럼 그냥 순회만 할 경우 사용
			// - 정렬된 순서대로 순회되지 않음
			// - 들어간 순서도 아님
			// - [0] 에 poll() 할 요소만 와있는 상태.

//         int answer = 0;

//         Iterator<Integer> iter = pque.iterator();
//         while (pque)
//         while (iter.hasNext()) { // 우선순위 큐의 각 노드들이 k보다 값이 큰지 확인
//            if (iter.next() > k) { // k보다 크면 break, 아니면 진행
//               System.out.println("섞은횟수 : 0");
//               break;
//            }else {
//               int topPriorityElement_1 = pque.peek();
//               pque.poll();
//               int topPriorityElement_2 = pque.peek();
//               pque.poll();
//               
//               int mixNumber = 0;
//               int mixElement = topPriorityElement_1 + (topPriorityElement_2 * 2); // 첫번째 Mix
//               mixNumber++;
//               
//               pque.add(mixElement);
//            }
//         }
//         

			// int topPriorityElement_1 = pque.peek();
			// pque.poll();
			// int topPriorityElement_2 = pque.peek();
			// pque.poll();
			//
			// int mixNumber = 0;
			// int mixElement = topPriorityElement_1 + (topPriorityElement_2 * 2); // 첫번째
			// Mix
			// mixNumber++;
			//
			// System.out.println("첫번째 Mix: " + mixElement);
			// pque.add(mixElement);
			//
			// Iterator<Integer> afterIter = pque.iterator();
			// idx = 1;
			// while (afterIter.hasNext()) {
			// int i = afterIter.next();
			// System.out.println("[" + idx + "번째]" + i + "");
			// idx++;
			// }
			//
			// while (!pq.isEmpty()) {
			//
			// Integer i = pq.poll();
			//
			// System.out.println(i + "");
			//
			// }

		}
	}

}